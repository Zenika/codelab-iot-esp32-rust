// If using the `binstart` feature of `esp-idf-sys`, always keep this module imported
use esp_idf_sys as _;
use esp_idf_hal::peripherals::Peripherals;
use std::time::Duration;
use std::thread;

use esp_idf_sys::{
  nvs_flash_init,
  nvs_flash_erase,
  ESP_ERR_NVS_NO_FREE_PAGES,
  ESP_ERR_NVS_NEW_VERSION_FOUND,
  EspError
};
use log::error;

mod wifi;

#[toml_cfg::toml_config]
pub struct Config {
    #[default("")]
    wifi_ssid: &'static str,
    #[default("")]
    wifi_psk: &'static str,
}

pub fn err(err: i32) -> Result<(), EspError> {
  if let Some(e) = EspError::from(err) {
    return Err(e);
  }

  Ok(())
}

// To avoid this message:
//   E (734) phy_init: esp_phy_load_cal_data_from_nvs: NVS has not been initialized. Call nvs_flash_init before starting WiFi/BT.
fn nvs_init() -> Result<(), EspError> {
  unsafe {
      let mut ret = nvs_flash_init();
      if ret == ESP_ERR_NVS_NO_FREE_PAGES as i32 || ret == ESP_ERR_NVS_NEW_VERSION_FOUND as i32 {
        error!("Need to erase flash: rc = {}", ret);
          err(nvs_flash_erase())?;
          ret = nvs_flash_init();
      }
      err(ret)
  }
}

fn main() {
  // It is necessary to call this function once. Otherwise some patches to the runtime
  // implemented by esp-idf-sys might not link properly. See https://github.com/esp-rs/esp-idf-template/issues/71
  esp_idf_sys::link_patches();
  // Bind the log crate to the ESP Logging facilities
  esp_idf_svc::log::EspLogger::initialize_default();

  let peripherals = Peripherals::take().unwrap();
  let sysloop = EspSystemEventLoop::take().unwrap();

  // The constant `CONFIG` is auto-generated by `toml_config`.
  let app_config = CONFIG;

  println!("{}", app_config.wifi_ssid);
  println!("{}", app_config.wifi_psk);

  nvs_init().expect("Failed to init NVS");

  // Connect to the Wi-Fi network
  let wifi = wifi::new(
      app_config.wifi_ssid,
      app_config.wifi_psk,
      peripherals.modem,
      sysloop,
  );

  if wifi.is_err() {
    error!("Invalid WiFi configuration");
  }

  loop {
    thread::sleep(Duration::from_millis(1000));
    println!("It's works!");
  }
}
